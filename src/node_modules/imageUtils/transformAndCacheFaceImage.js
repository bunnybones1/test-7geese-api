var request = require('request');
var fs = require('fs');
var md5 = require('md5');
var easyimage = require('easyimage');

var getExtension = require('./getExtension');

function transformAndCacheFaceImage(remotePath, params, callback) {
    var ext = '.' + getExtension(remotePath);
    if(ext.length > 5) {
        console.warn('bad extension. Assuming jpeg.');
        ext = '.jpeg';
    }
    var localPath = './public/imageCache/' + md5(remotePath) + ext;
    var localTransformedPath = localPath.replace(ext, '.face.jpg');
    function transformImage() {
        var facePoints = params.points;
        var cropData = {
            src:localPath, dst: localTransformedPath,
            width:256, height:256,
            cropwidth:256, cropheight:256,
            x:0, y:0,
            // gravity: 'NorthWest',
            fill:true,
            ignoreAspectRatio: true
        };
        if(facePoints) {
            console.log(facePoints);
            var minX = Infinity;
            var minY = Infinity;
            var maxX = -Infinity;
            var maxY = -Infinity;
            for (var i = 0; i < facePoints.length; i++) {
                minX = Math.min(minX, facePoints[i].x);
                maxX = Math.max(maxX, facePoints[i].x);
                minY = Math.min(minY, facePoints[i].y);
                maxY = Math.max(maxY, facePoints[i].y);
            }

            var rangeX = maxX - minX;
            var rangeY = maxY - minY;

            var ratioTo256 = 256 / rangeX;

            cropData.width = params.width * ratioTo256;
            cropData.height = params.height * ratioTo256;
            cropData.cropwidth = Math.ceil(rangeX) * ratioTo256;
            cropData.cropheight = Math.ceil(rangeY) * ratioTo256;
            cropData.gravity = 'NorthWest';
            cropData.fill = false;
            cropData.x = minX * ratioTo256;
            cropData.y = minY * ratioTo256;
        }
        console.log('transforming local image for face. ' + localPath);
        console.log('transforming ' + JSON.stringify(cropData));
        easyimage.rescrop(cropData).then(
            function(image) {
                console.log('Resized and cropped: ' + localTransformedPath + ' ' + image.width + ' x ' + image.height);
                callback(null, localTransformedPath);
            },
            function (err) {
                callback(err);
            }
        );
    }
    if(fs.existsSync(localTransformedPath)) {
        console.log('local transformed face image already cached. ' + localTransformedPath);
        callback(null, localTransformedPath);
        return;
    }
    if(fs.existsSync(localPath)) {
        console.log('local image already cached. ' + localPath);
        transformImage();
        return;
    }
    request({
            'url': remotePath,
            'encoding':'binary'
        }, 
        function (error, response, body) {
            if (!error && response.statusCode == 200) {
                fs.writeFileSync(localPath, body, 'binary');
                callback(null, localPath);

                // im.identify('/mylocalpath/image.jpg',
                //     function(error, features) {
                //         callback(error);
                //         console.log(features);
                //      }
                // );
            } else{
                callback(error);
            }
        }
    )
}


module.exports = transformAndCacheFaceImage;